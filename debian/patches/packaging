Description: Changes for to create formal package.
Author: Brian May <bam@debian.org>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ django-xmlrpc-0.1/setup.py
@@ -0,0 +1,78 @@
+from distutils.core import setup
+from distutils.command.install_data import install_data
+from distutils.command.install import INSTALL_SCHEMES
+import os
+import sys
+
+class osx_install_data(install_data):
+    # On MacOS, the platform-specific lib dir is /System/Library/Framework/Python/.../
+    # which is wrong. Python 2.5 supplied with MacOS 10.5 has an Apple-specific fix
+    # for this in distutils.command.install_data#306. It fixes install_lib but not
+    # install_data, which is why we roll our own install_data class.
+
+    def finalize_options(self):
+        # By the time finalize_options is called, install.install_lib is set to the
+        # fixed directory, so we set the installdir to install_lib. The
+        # install_data class uses ('install_data', 'install_dir') instead.
+        self.set_undefined_options('install', ('install_lib', 'install_dir'))
+        install_data.finalize_options(self)
+
+if sys.platform == "darwin": 
+    cmdclasses = {'install_data': osx_install_data} 
+else: 
+    cmdclasses = {'install_data': install_data} 
+
+def fullsplit(path, result=None):
+    """
+    Split a pathname into components (the opposite of os.path.join) in a
+    platform-neutral way.
+    """
+    if result is None:
+        result = []
+    head, tail = os.path.split(path)
+    if head == '':
+        return [tail] + result
+    if head == path:
+        return result
+    return fullsplit(head, [tail] + result)
+
+# Tell distutils to put the data_files in platform-specific installation
+# locations. See here for an explanation:
+# http://groups.google.com/group/comp.lang.python/browse_thread/thread/35ec7b2fed36eaec/2105ee4d9e8042cb
+for scheme in INSTALL_SCHEMES.values():
+    scheme['data'] = scheme['purelib']
+
+# Compile the list of packages available, because distutils doesn't have
+# an easy way to do this.
+packages, data_files = [], []
+root_dir = os.path.dirname(__file__)
+if root_dir != '':
+    os.chdir(root_dir)
+code_dir = 'django_xmlrpc'
+
+for dirpath, dirnames, filenames in os.walk(code_dir):
+    # Ignore dirnames that start with '.'
+    for i, dirname in enumerate(dirnames):
+        if dirname.startswith('.'): del dirnames[i]
+    if '__init__.py' in filenames:
+        packages.append('.'.join(fullsplit(dirpath)))
+    elif filenames:
+        data_files.append([dirpath, [os.path.join(dirpath, f) for f in filenames]])
+
+# Small hack for working with bdist_wininst.
+# See http://mail.python.org/pipermail/distutils-sig/2004-August/004134.html
+if len(sys.argv) > 1 and sys.argv[1] == 'bdist_wininst':
+    for file_info in data_files:
+        file_info[0] = '\\PURELIB\\%s' % file_info[0]
+
+setup(
+    name = "django-xmlrpc",
+    version = '0.1debian1',
+    url = 'https://launchpad.net/django-xmlrpc',
+    author = 'Graham Binns',
+    author_email = 'graham@grahambinns.com',
+    description = 'XMLRPC library for Django',
+    packages = packages,
+    cmdclass = cmdclasses,
+    data_files = data_files,
+)
--- /dev/null
+++ django-xmlrpc-0.1/Makefile
@@ -0,0 +1,37 @@
+PYTHON=`which python`
+DESTDIR=/
+BUILDIR=$(CURDIR)/debian/django-xmlrpc
+PROJECT=django-xmlrpc
+VERSION="0.1debian1"
+
+all:
+		@echo "make source - Create source package"
+		@echo "make install - Install on local system"
+		@echo "make buildrpm - Generate a rpm package"
+		@echo "make builddeb - Generate a deb package"
+		@echo "make clean - Get rid of scratch and byte files"
+
+source:
+		$(PYTHON) setup.py sdist $(COMPILE)
+
+install:
+		$(PYTHON) setup.py install --root $(DESTDIR) $(COMPILE)
+
+buildrpm:
+		$(PYTHON) setup.py bdist_rpm --post-install=rpm/postinstall --pre-uninstall=rpm/preuninstall
+
+builddeb:
+		# build the source package in the parent directory
+		# then rename it to project_version.orig.tar.gz
+		$(PYTHON) setup.py sdist $(COMPILE) --dist-dir=../ --prune
+		rename -f 's/$(PROJECT)-(.*)\.tar\.gz/$(PROJECT)_$$1\.orig\.tar\.gz/' ../*
+		# build the package
+		dpkg-buildpackage -i -I -rfakeroot
+
+clean:
+		$(PYTHON) setup.py clean
+		$(MAKE) -f $(CURDIR)/debian/rules clean
+		rm -rf build/ MANIFEST
+		find . -name '*.pyc' -delete
+
+
--- /dev/null
+++ django-xmlrpc-0.1/PKG-INFO
@@ -0,0 +1,10 @@
+Metadata-Version: 1.0
+Name: django-xmlrpc
+Version: 0.1debian1
+Summary: XMLRPC library for Django
+Home-page: https://launchpad.net/django-xmlrpc
+Author: Graham Binns
+Author-email: graham@grahambinns.com
+License: UNKNOWN
+Description: UNKNOWN
+Platform: UNKNOWN
